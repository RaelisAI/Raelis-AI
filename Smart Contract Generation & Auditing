from web3 import Web3

class SmartContractManager:
    def __init__(self, contract_address, provider_url):
        self.web3 = Web3(Web3.HTTPProvider(provider_url))
        self.contract_address = contract_address
        self.contract = None

    def deploy_contract(self, abi, bytecode, account, private_key):
        contract = self.web3.eth.contract(abi=abi, bytecode=bytecode)
        transaction = contract.constructor().buildTransaction({
            'gas': 2000000,
            'gasPrice': self.web3.toWei('20', 'gwei'),
            'nonce': self.web3.eth.getTransactionCount(account),
        })
        signed_txn = self.web3.eth.account.signTransaction(transaction, private_key)
        txn_hash = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction)
        return txn_hash

    def audit_contract(self, abi):
        try:
            contract = self.web3.eth.contract(address=self.contract_address, abi=abi)
            print("Contract is valid and deployed.")
            return contract
        except Exception as e:
            print(f"Contract audit failed: {str(e)}")
            return None

contract_manager = SmartContractManager("0xYourContractAddress", "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID")
contract_manager.deploy_contract(abi, bytecode, "0xYourAccount", "YourPrivateKey")
contract_manager.audit_contract(abi)
